package model.format

import model.ModelRaw
import java.lang.StringBuilder
import java.nio.ByteBuffer

class OBJModelFormat(

): ModelFormat {

    override fun getName(): String = "OBJ"

    override fun getExtension(): String = "obj"

    override fun hasSaveSupport(): Boolean = true

    override fun hasLoadSupport(): Boolean = false

    override fun loadFrom(buf: ByteBuffer): ModelRaw {
        TODO("Not yet implemented")
    }

    override fun save(model: ModelRaw): ByteArray {
        val out = StringBuilder()

        out.append("# generated by experimental obj generator\n\n")

        model.mesh.triangles.forEach {
            out.append("v ${it.a.x} ${it.a.y} ${it.a.z}\n")
            out.append("v ${it.b.x} ${it.b.y} ${it.b.z}\n")
            out.append("v ${it.c.x} ${it.c.y} ${it.c.z}\n")

            out.append("f -1 -2 -3\n\n")
        }

        return out.toString().toByteArray()
    }

    override fun saveTo(buf: ByteBuffer, model: ModelRaw) {
        buf.put(save(model))
    }

    override fun estimateSize(model: ModelRaw): Int =
        43 + (model.mesh.triangles.size * 40 * 3 + 20)

}